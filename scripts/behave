#!/usr/bin/env python

import sys, os
import signal
import argparse
import importlib
import logging
from logging import handlers

try: import simplejson as json
except ImportError: import json

from pyoperant import local

try:
    registered_protocols = local.BEHAVIORS
except AttributeError:
    registered_protocols = ['pyoperant.behavior',]


def parse_commandline(arg_str=sys.argv[1:]):
    """ parse command line arguments

    """
    parser = argparse.ArgumentParser(
        description='Run Pyoperant scripts from the command line',
        epilog='The following protocols are installed and registered: ' + \
               ', '.join(list_protocols())
        )
    parser.add_argument('protocol',
                        action='store',
                        type=str,
                        help='(str) experiment protocol'
                        )
    parser.add_argument('-P', '--panel',
                        action='store',
                        type=str,
                        dest='panel',
                        required=True,
                        help='(string) panel identifier'
                        )
    parser.add_argument('-S', '--subject',
                        action='store',
                        type=str,
                        dest='subject',
                        required=True,
                        help='subject identifier'
                        )
    parser.add_argument('-c','--config',
                        action='store',
                        type=str,
                        dest='config_file',
                        default='config.json',
                        required=False,
                        help='configuration file [default: %(default)s]'
                        )
    parser.add_argument('--debug',
                        action='store_true',
                        dest='debug',
                        required=False,
                        help='turn on debugging [default: %(default)s]'
                        )
    args = parser.parse_args(arg_str)

    return vars(args)

def list_protocols():
    from pyoperant.behavior.base import BaseExp
    l = []
    behav_modules = [importlib.import_module(pstr) for pstr in registered_protocols]
    for mod in behav_modules:
        for name, obj in mod.__dict__.iteritems():
            try:
                if issubclass(obj,BaseExp):
                    l.append(name)

            except TypeError:
                pass
    return l

def find_protocol(protocol):
    packages = []
    for pstr in registered_protocols:
        p = importlib.import_module(pstr)

        try:
            Protocol = getattr(p, protocol)
            return Protocol
        except AttributeError:
            continue
    raise ImportError('%s not found' % protocol)

def load_config(config_file):

    if 'json' in config_file:
        with open(config_file, 'rb') as config:
            parameters = json.load(config)

    return parameters

def _log_except_hook(*exc_info):
    text = "".join(traceback.format_exception(*exc_info))
    logging.error("Unhandled exception: %s", text)

def _clean_exit(*args):
    sys.exit(0)

def main():

    # setup a clean exit when killing the processes
    for sig in (signal.SIGINT,signal.SIGTERM,):
        signal.signal(sig,_clean_exit)

    # parse the command line and start setting up default paths
    cmd_line = parse_commandline()

    experiment_path = os.path.join(local.DATAPATH,cmd_line['subject'])
    config_file = os.path.join(experiment_path,cmd_line['config_file'])
    stimuli_path = os.path.join(experiment_path,'Stimuli')

    # setup basic logger
    log_file = os.path.join(experiment_path,cmd_line['subject']+'.log')
    log_level = logging.DEBUG if cmd_line['debug'] else logging.INFO
    sys.excepthook = _log_except_hook # send uncaught exceptions to log file

    logging.basicConfig(
        filename=log_file,
        level=log_level,
        format='"%(asctime)s","%(levelname)s","%(message)s"',
        )

    log = logging.getLogger()
    log.getLogger('pyoperant').set_level(log_level)

    # load parameters
    try:
        parameters = load_config(config_file)
    except IOError:
        parameters = {}

    for k in ['subject','panel_name','experiment_path']:
        if k in parameters.keys():
            parameters.pop(k)

    # setup email handler for logging errors
    smtp_config = local.SMTP_CONFIG
    smtp_config.update(toaddrs=[parameters['experimenter']['email'],])
    email_handler = handlers.SMTPHandler(**smtp_config)
    email_handler.setLevel(logging.WARNING)

    heading = '%s\n' % (cmd_line['subject'])
    formatter = logging.Formatter(heading+'%(levelname)s at %(asctime)s:\n%(message)s')
    email_handler.setFormatter(formatter)
    log.addHandler(email_handler)

    # override stim path if present in config file
    stimuli_path = parameters.pop('stim_path') if 'stim_path' in parameters else stimuli_path

    # define and initialize the protocol
    BehaviorProtocol = find_protocol(cmd_line['protocol'])
    behavior = BehaviorProtocol(
        panel=local.PANELS[cmd_line['panel']](),
        subject=cmd_line['subject'],
        panel_name=cmd_line['panel'],
        experiment_path=experiment_path,
        stim_path=stimuli_path,
        **parameters
        )

    # run the protocol
    behavior.run()

if __name__ == "__main__":
    main()
