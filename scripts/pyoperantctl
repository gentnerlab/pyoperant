#!/usr/bin/env perl

$numBoxes=16;

$opdatdir="/home/bird/opdat/";
$file="${opdatdir}panel_subject_behavior";

#this code parses a file as described in panel_subject_behavior
sub trim($)
{
        my $string = shift;
        $string =~ s/^\s+//;
        $string =~ s/\s+$//;
        return $string;
}

sub readfile{
    ($file, $numboxes)=@_;

    @lines=`cat $file`;

    $i=0;
    while($numBoxes>$i){
    @boxdone[$i]=0;
    $i++;
    }

    $j=0;
    $realLineNum=0;
    while(scalar(@lines)>$j){
    $line=trim($lines[$j]);

    if($line =~ /^\#/){
        #print("ignoring a comment line\n");
    } elsif ($line =~ /\S+/) {

        @fields=split(/\s+/,$line,5);

        if(scalar(@fields)==5){
        if($fields[0]>0 && $fields[0]<=$numboxes){
            if($boxdone[$fields[0] - 1]==0){
            $boxdone[$fields[0] - 1]=1;

            $f=0;
            foreach $str(@fields){

                $current=trim($str);
                while($current =~ /<(\d+)>/ && $1 > 0 && $1 <= $f){
                #print "\n$current matched for $1\n";
                $current =~ s/<(\d+)>/$fixed[$realLineNum][$1-1]/;
                }
                $fixed[$realLineNum][$f]=$current;

                #print "$fixed[$realLineNum][$f] \t";
                $f++;
            }
            #print "\n";
            $realLineNum++;

            } else {
            print("ignoring an additional line for box ".$fields[0]." in the file ".$file."\n");
            }
        } else {
            print("ignoring a line for box ".$fields[0]." in the file ".$file." because it is less than 0 or bigger than ".$numboxes."\n");
        }
        } else {
        print("ignoring a line in the file ".$file." that contains something other than 5 columns\n");
        }
    } else {
        #print "ignoring a blank line\n";
    }
    $j++;
    }
    return @fixed;
}

@data=readfile($file, $numBoxes);

#here you should list the programs that may be run
#this program will kill these processes if they are running for a box if the file above has a line for that box that doesn't match
@psnames=("behave",);

sub checkoptions(@);

$psnames=join("|",@psnames);
@processes=`ps waux | egrep '$psnames'`;

#pass a string containing s as argument 1 to activate starting
$shouldStartProcesses=0;
#pass a string containing k as argument 1 to activate killing
$shouldKillProcesses=0;
#pass a string containing d as argument 1 to kill all (needs k to actually work)
$shouldKillAll=0;

if($#ARGV>=0){
   #print("$ARGV[0] is first argument\n");
   if($ARGV[0] =~ /k/){
       print("activating killing\n");
       $shouldKillProcesses=1;
   } else {
       print("killing inactive.  pass a command line argument containing 'k' to activate.\n");
   }
   if($ARGV[0] =~ /s/){
       print("activating starting\n");
       $shouldStartProcesses=1;
   } else {
       print("starting inactive.  pass a command line argument containing 's' to activate.\n");
   }
   if($ARGV[0] =~ /d/){
       print("killing all.\n");
       $shouldKillAll=1;
       if(!$shouldKillProcesses){
	   print("you need to also pass 'k' in order for killing all to actually kill.\n");
       }
   } else {
       print("pass a command line argument containing 'd' to bring down all processes.\n");
   }
} else {
    print("starting and killing inactive.  pass a command line argument containing 's' and/or 'k', respectively, to activate.\n");
    print("pass a command line argument containing 'd' to bring down all processes.\n");
}

if($#ARGV>=1){
    $killstring = $ARGV[1];
    print("kill string is $killstring\n");
} else {
    $killstring='';
    print("a second argument would have been added to the logfiles when processes are killed (ie a reason for killing the process)\n");
}

print("\n");

$i=0;
while(scalar(@processes)>0){
    $ps=pop(@processes);
    @info=split(" ",$ps,11);
    chop($info[10]);
    $info[10] =~ s/^(.*\/python .*\/bin\/)//;
    #$info[10] =~ s/^(\/usr\/local\/anaconda\/bin\/python \/usr\/local\/anaconda\/bin\/)//;
    #$info[10] =~ s/^(\/home\/bin\/anaconda2\/bin\/python \/home\/bird\/anaconda2\/bin\/)//;
    print($info[10]."\n");
    if($info[10] =~ /^($psnames)/){
	@pspieces=split(" ",$info[10]);

	$j=0;
	while(scalar(@pspieces)>$j){
	    if($pspieces[$j] eq "-P"){
		$boxNum = $pspieces[1 + $j];
	    } elsif ($pspieces[$j] eq "-S") {
		$birdID = $pspieces[1 + $j];
	    }
	    $j++;
	}
	@indProcesses[$i]=$info[10];
	@indBoxes[$i]=$boxNum;
	@indBirdIDs[$i]=$birdID;
	@indIDs[$i]=$info[1];
	@indStatuses[$i]=$info[7];
	$i++;
    }
}

$i=0;
while($numBoxes>$i){
    @boxCorrect[$i]=-1;
    @correctProgram[$i]="";
    @directory[$i]="";
    @birdid[$i]=0;
    $i++;
}

($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$date = sprintf("%02d-%02d-%02d",(1+$mon),$mday,(1900+$year-2000));

foreach $row(@data){
    @fields=@$row;

    if($fields[1]!='1'){
	print("box $fields[0] disabled\n");
    }

    $boxCorrect[$fields[0] - 1]=0;
    if($shouldKillAll || $fields[1]!='1'){
	$correctProgram[$fields[0] - 1]="NONE";
    } else {
	$correctProgram[$fields[0] - 1]=$fields[4];
    }
    $directory[$fields[0] - 1]=$fields[3];
    $birdid[$fields[0] - 1]=$fields[2];

    $i=0;
    while(scalar(@indProcesses)>$i){
	if($indBoxes[$i]==$fields[0]){
#	    if($indProcesses[$i] eq $fields[3]){
	    if(checkoptions($indProcesses[$i], $correctProgram[$fields[0] - 1])){
		if ($indStatuses[$i] eq "SL" || $indStatuses[$i] eq "RL"){
		    if($boxCorrect[$fields[0] - 1]==0){
			print("box ".$fields[0]." correctly running ".$indProcesses[$i]."\n");
			$boxCorrect[$fields[0] - 1]=1;
		    } else {
			print("box ".$fields[0]." INCORRECTLY running duplicate copy of ".$indProcesses[$i]." you should kill one of them\n");
		    }
		} elsif ($indStatuses[$i] eq "Ss") {
		    print("box ".$fields[0]." found running session leader process ".$indIDs[$i]."\n");
		} else {
		    print("box ".$fields[0]." running correct process ".$indProcesses[$i]." but with status ".$indStatuses[$i]." you should investigate ".$indIDs[$i]."\n");
		    $boxCorrect[$fields[0] - 1]=1;
		}
	    } else {
		if($indStatuses[$i] eq "Ss"){
		    print("box ".$fields[0]." running session leader process ".$indIDs[$i]."\n");
		} else {
		    print("box ".$fields[0]." INCORRECTLY running ".$indProcesses[$i]." should kill ".$indIDs[$i]."\n");
		    $killID=$indBirdIDs[$i];
		    $killLog=$opdatdir."B".$killID."/B".$killID."_log.txt";
		    print("log directory is $killLog\n");
		    if($shouldKillProcesses){
			print("attempting to kill $indProcesses[$i] ($indIDs[$i])\n");
			system "kill $indIDs[$i]";
			#system "cd $directory[$i]; echo '".$date.": ".$killstring." killing $indProcesses[$i]' >> $opdatdir"."B".$birdid[$i]."/B".$birdid[$i]."_log.txt";
			system "echo '".$date.": killing $indProcesses[$i] :: $killstring' >> $killLog";
		    }
		}
	    }
	}
	$i++;
    }
}

$i=0;
while($i<$numBoxes){
    if($boxCorrect[$i]==0){
	if($correctProgram[$i] eq "NONE"){
	    print("box ".($i + 1)." correctly running no program (assuming processes suggested above were killed)\n");
	} else {
	    print("box ".($i + 1)." needs to start ".$correctProgram[$i]." in directory ".$directory[$i]."\n");

	    if($shouldStartProcesses){
		print("attempting to start $correctProgram[$i] in $directory[$i]\n");
		system "cd $directory[$i]; echo '".$date.": starting $correctProgram[$i]' >> $opdatdir"."B".$birdid[$i]."/B".$birdid[$i]."_log.txt; $correctProgram[$i] &";
	    }
	}
    } elsif ($boxCorrect[$i]==-1){
	print("box ".($i + 1)." has no line in file ".$file."\n");
    } elsif ($boxCorrect[$i]==1){
	#print("box ".($i + 1)." needs no change\n");
    } else {
	print("box ".($i + 1)." had some problem that should never happen\n");
    }
    $i++;
}

sub checkoptions(@) {
	($s1,$s2)=@_;

	$s1=trim($s1);
	$s2=trim($s2);
	if($s1=~s/^(\S*)// && $s2=~s/^$1//){
		$s1=trim($s1);
		$s2=trim($s2);
		if($s1=~s/(\S*)$// && $s2=~s/$1$//){
			$s1=trim($s1);
			$s2=trim($s2);
			@s1=split("-",$s1);
			@s2=split("-",$s2);
			#print "'".$s1."'"."\t"."'".$s2."'"."\n";
			@redo=@s2;
			foreach $o(@s1){
				@s2=@redo;
				$o=trim($o);
				$match=0;
				$n=0;
				@redo=();
				foreach $m(@s2){
					$m=trim($m);
					#print "'".$m."'"."\t"."'".$o."'"."\n";
					if($m=~/^(\S*)\s*(\S*)$/ && $o=~/^$1\s*$2$/){
						$match=1;
					} else {
						$redo[$n]=$m;
						$n++;
					}
				}
				if($match){
				} else {
					#print "no match for option\n";
					return 0;
				}
			}
			if(scalar(@redo)==0){
				#success!
				return 1;
			} else {
				#print "leftover options\n";
				return 0;
			}
		} else {
			#print "not same stimfile\n";
			return 0;
		}
	} else {
		#print "not same program\n";
		return 0;
	}
}
